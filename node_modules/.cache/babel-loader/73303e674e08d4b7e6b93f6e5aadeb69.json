{"ast":null,"code":"var _jsxFileName = \"F:\\\\testcase3\\\\final1\\\\growerschoicemart\\\\src\\\\pages\\\\AdminPage.js\",\n    _s = $RefreshSig$();\n\n// AdminPage.js\nimport React, { useEffect, useState } from 'react';\nimport { database } from '../firebase';\nimport './AdminPage.css'; // Import the CSS file\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AdminPage = () => {\n  _s();\n\n  const [orders, setOrders] = useState([]);\n  const [counter, setCounter] = useState(1); // Initialize counter to 1\n\n  useEffect(() => {\n    // Fetch orders from Firebase\n    const fetchOrders = async () => {\n      try {\n        const ordersSnapshot = await database.ref('orders').once('value');\n        const ordersData = ordersSnapshot.val();\n        const ordersArray = ordersData ? Object.values(ordersData) : [];\n        setOrders(ordersArray);\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n      }\n    };\n\n    fetchOrders();\n  }, []);\n\n  const handleDeleteOrder = async orderId => {// ... (unchanged code)\n  };\n\n  const handleOrderHover = async orderId => {\n    try {\n      // Fetch cart items details for the hovered order ID\n      const orderDetailsSnapshot = await database.ref(`orders/${orderId}/cartItems`).once('value');\n      const cartItemsDetails = orderDetailsSnapshot.val(); // Assuming cartItemsDetails is an array\n\n      const formattedCartItems = cartItemsDetails ? Object.values(cartItemsDetails).map((item, index) => ({\n        index,\n        productName: item.title // Add other properties as needed\n\n      })) : [];\n      console.log('formattedCartItems:', formattedCartItems); // Add this line for debugging\n\n      setHoveredOrderDetails(formattedCartItems);\n    } catch (error) {\n      console.error('Error fetching order details:', error);\n    }\n  };\n\n  const handleMouseEnter = orderId => {\n    setHoveredOrderId(orderId);\n    handleOrderHover(orderId);\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredOrderId(null);\n    setHoveredOrderDetails(null);\n  };\n\n  const handleGenerateOrder = async () => {\n    // Generate a new order with an incrementing number\n    const newOrder = {\n      orderId: counter // ... other order details\n\n    }; // Increment the counter for the next order\n\n    setCounter(prevCounter => prevCounter + 1); // Push the new order to the 'orders' node in the database\n\n    await database.ref(`orders/${newOrder.orderId}`).set(newOrder); // Fetch updated orders from Firebase\n\n    fetchOrders();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Page - Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateOrder,\n      children: \"Generate Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"admin-table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), hoveredOrderId && hoveredOrderDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Cart Items Details for Order ID: \", hoveredOrderId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.values(hoveredOrderDetails).map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: `${item.productName} (Index: ${item.index})`\n        }, item.index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AdminPage, \"EApvu+vwYhgWdfFn1s3wcGuezxI=\");\n\n_c = AdminPage;\nexport default AdminPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"sources":["F:/testcase3/final1/growerschoicemart/src/pages/AdminPage.js"],"names":["React","useEffect","useState","database","AdminPage","orders","setOrders","counter","setCounter","fetchOrders","ordersSnapshot","ref","once","ordersData","val","ordersArray","Object","values","error","console","handleDeleteOrder","orderId","handleOrderHover","orderDetailsSnapshot","cartItemsDetails","formattedCartItems","map","item","index","productName","title","log","setHoveredOrderDetails","handleMouseEnter","setHoveredOrderId","handleMouseLeave","handleGenerateOrder","newOrder","prevCounter","set","hoveredOrderId","hoveredOrderDetails"],"mappings":"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","sourcesContent":["// AdminPage.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { database } from '../firebase';\r\nimport './AdminPage.css'; // Import the CSS file\r\n\r\nconst AdminPage = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [counter, setCounter] = useState(1); // Initialize counter to 1\r\n\r\n  useEffect(() => {\r\n    // Fetch orders from Firebase\r\n    const fetchOrders = async () => {\r\n      try {\r\n        const ordersSnapshot = await database.ref('orders').once('value');\r\n        const ordersData = ordersSnapshot.val();\r\n        const ordersArray = ordersData ? Object.values(ordersData) : [];\r\n        setOrders(ordersArray);\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n      }\r\n    };\r\n\r\n    fetchOrders();\r\n  }, []);\r\n\r\n  const handleDeleteOrder = async (orderId) => {\r\n    // ... (unchanged code)\r\n  };\r\n\r\n  const handleOrderHover = async (orderId) => {\r\n    try {\r\n      // Fetch cart items details for the hovered order ID\r\n      const orderDetailsSnapshot = await database.ref(`orders/${orderId}/cartItems`).once('value');\r\n      const cartItemsDetails = orderDetailsSnapshot.val();\r\n\r\n      // Assuming cartItemsDetails is an array\r\n      const formattedCartItems = cartItemsDetails\r\n        ? Object.values(cartItemsDetails).map((item, index) => ({\r\n            index,\r\n            productName: item.title,\r\n            // Add other properties as needed\r\n          }))\r\n        : [];\r\n\r\n      console.log('formattedCartItems:', formattedCartItems); // Add this line for debugging\r\n\r\n      setHoveredOrderDetails(formattedCartItems);\r\n    } catch (error) {\r\n      console.error('Error fetching order details:', error);\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (orderId) => {\r\n    setHoveredOrderId(orderId);\r\n    handleOrderHover(orderId);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredOrderId(null);\r\n    setHoveredOrderDetails(null);\r\n  };\r\n\r\n  const handleGenerateOrder = async () => {\r\n    // Generate a new order with an incrementing number\r\n    const newOrder = {\r\n      orderId: counter,\r\n      // ... other order details\r\n    };\r\n\r\n    // Increment the counter for the next order\r\n    setCounter((prevCounter) => prevCounter + 1);\r\n\r\n    // Push the new order to the 'orders' node in the database\r\n    await database.ref(`orders/${newOrder.orderId}`).set(newOrder);\r\n\r\n    // Fetch updated orders from Firebase\r\n    fetchOrders();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Admin Page - Orders</h2>\r\n      <button onClick={handleGenerateOrder}>Generate Order</button>\r\n      <table className=\"admin-table\">\r\n        {/* ... (unchanged code) */}\r\n      </table>\r\n\r\n      {hoveredOrderId && hoveredOrderDetails && (\r\n        <div className=\"tooltip\">\r\n          <h3>Cart Items Details for Order ID: {hoveredOrderId}</h3>\r\n          <ul>\r\n            {Object.values(hoveredOrderDetails).map((item) => (\r\n              <li key={item.index}>{`${item.productName} (Index: ${item.index})`}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminPage;\r\n"]},"metadata":{},"sourceType":"module"}