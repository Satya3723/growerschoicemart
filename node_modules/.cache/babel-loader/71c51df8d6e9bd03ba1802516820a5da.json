{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */\n\nexport const getCartItemsHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  console.log(request);\n  const userId = user._id;\n\n  if (!userId) {\n    return new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const userCart = schema.users.findBy({\n    _id: userId\n  }).cart;\n  return new Response(200, {}, {\n    cart: userCart\n  });\n};\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  const userId = user._id;\n\n  try {\n    if (!userId) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const {\n      product\n    } = JSON.parse(request.requestBody);\n    userCart.push({ ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(201, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  const userId = user._id;\n\n  try {\n    if (!userId) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    let userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter(item => item._id !== productId);\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      return new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userCart = schema.users.findBy({\n      _id: userId\n    }).cart;\n    const {\n      action\n    } = JSON.parse(request.requestBody);\n\n    if (action.type === \"increment\") {\n      userCart.forEach(product => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach(product => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n\n    this.db.users.update({\n      _id: userId\n    }, {\n      cart: userCart\n    });\n    return new Response(200, {}, {\n      cart: userCart\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["F:/testcase3/final1/growerschoicemart/src/backend/controllers/CartController.js"],"names":["Response","formatDate","requiresAuth","getCartItemsHandler","schema","request","user","JSON","parse","localStorage","getItem","console","log","userId","_id","errors","userCart","users","findBy","cart","addItemToCartHandler","product","requestBody","push","createdAt","updatedAt","qty","db","update","error","removeItemFromCartHandler","productId","params","filter","item","updateCartItemHandler","call","action","type","forEach"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Cart are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's cart.\n * send GET Request at /api/user/cart\n * */\nexport const getCartItemsHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  console.log(request);\n  const userId = user._id;\n  if (!userId) {\n    return new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userCart = schema.users.findBy({ _id: userId }).cart;\n  return new Response(200, {}, { cart: userCart });\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart\n * body contains {product}\n * */\n\nexport const addItemToCartHandler = function (schema, request) {\n   \n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  const userId = user._id;\n  \n  try {\n    if (!userId) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    \n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { product } = JSON.parse(request.requestBody);\n    userCart.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      qty: 1,\n    });\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(201, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's cart.\n * send DELETE Request at /api/user/cart/:productId\n * */\n\nexport const removeItemFromCartHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  const userId = user._id;\n  \n  try {\n    if (!userId) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userCart = schema.users.findBy({ _id: userId }).cart;\n    const productId = request.params.productId;\n    userCart = userCart.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding items to user's cart.\n * send POST Request at /api/user/cart/:productId\n * body contains {action} (whose 'type' can be increment or decrement)\n * */\n\nexport const updateCartItemHandler = function (schema, request) {\n  const productId = request.params.productId;\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userCart = schema.users.findBy({ _id: userId }).cart;\n    const { action } = JSON.parse(request.requestBody);\n    if (action.type === \"increment\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty += 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    } else if (action.type === \"decrement\") {\n      userCart.forEach((product) => {\n        if (product._id === productId) {\n          product.qty -= 1;\n          product.updatedAt = formatDate();\n        }\n      });\n    }\n    this.db.users.update({ _id: userId }, { cart: userCart });\n    return new Response(200, {}, { cart: userCart });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}