{"ast":null,"code":"import { Server, Model, RestSerializer } from \"miragejs\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { addItemToCartHandler, getCartItemsHandler, removeItemFromCartHandler, updateCartItemHandler } from \"./backend/controllers/CartController\";\nimport { getAllCategoriesHandler, getCategoryHandler } from \"./backend/controllers/CategoryController\";\nimport { getAllProductsHandler, getProductHandler } from \"./backend/controllers/ProductController\";\nimport { addItemToWishlistHandler, getWishlistItemsHandler, removeItemFromWishlistHandler } from \"./backend/controllers/WishlistController\";\nimport { categories } from \"./backend/db/categories\";\nimport { products } from \"./backend/db/products\";\nimport { users } from \"./backend/db/users\";\nimport { Response } from \"miragejs\";\n\nconst sign = require(\"jwt-encode\"); // Hardcoded JWT secret key for testing purposes\n\n\nconst jwtSecretKey = \"/Q5/K8CrI0kz25G/wZ3mquojG/Kf3xIghztXXLdwuZw=\";\nexport function makeServer() {\n  let {\n    environment = \"development\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Server({\n    serializers: {\n      application: RestSerializer\n    },\n    environment,\n    models: {\n      product: Model,\n      category: Model,\n      user: Model,\n      cart: Model,\n      wishlist: Model\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      // Disabling console logs from Mirage\n      server.logging = true;\n      console.log(\"Users to be seeded:\", users); // Seed products\n\n      products.forEach(item => server.create(\"product\", { ...item\n      })); // Seed users with an empty cart and wishlist\n\n      users.forEach(item => server.create(\"user\", { ...item,\n        cart: [],\n        wishlist: []\n      })); // Seed categories\n\n      categories.forEach(item => server.create(\"category\", { ...item\n      }));\n    },\n\n    routes() {\n      this.namespace = \"api\"; // Auth routes (public)\n\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this)); // Products routes (public)\n\n      this.get(\"/products\", getAllProductsHandler.bind(this));\n      this.get(\"/products/:productId\", getProductHandler.bind(this)); // Categories routes (public)\n\n      this.get(\"/categories\", getAllCategoriesHandler.bind(this));\n      this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this)); // Cart routes (private)\n\n      this.get(\"/user/cart\", getCartItemsHandler.bind(this));\n      this.post(\"/user/cart\", addItemToCartHandler.bind(this));\n      this.post(\"/user/cart/:productId\", updateCartItemHandler.bind(this));\n      this.delete(\"/user/cart/:productId\", removeItemFromCartHandler.bind(this)); // Wishlist routes (private)\n\n      this.get(\"/user/wishlist\", getWishlistItemsHandler.bind(this));\n      this.post(\"/user/wishlist\", addItemToWishlistHandler.bind(this));\n      this.delete(\"/user/wishlist/:productId\", removeItemFromWishlistHandler.bind(this)); // Middleware to add JWT secret key to the context\n\n      this.pretender.handledRequest = function (verb, path, request) {\n        return {\n          status: 200,\n          headers: {\n            \"content-type\": \"application/json\"\n          },\n          text: JSON.stringify({\n            jwtSecretKey\n          })\n        };\n      };\n    }\n\n  });\n}","map":{"version":3,"sources":["F:/testcase3/final1/AgroStores-react-dev/src/server.js"],"names":["Server","Model","RestSerializer","loginHandler","signupHandler","addItemToCartHandler","getCartItemsHandler","removeItemFromCartHandler","updateCartItemHandler","getAllCategoriesHandler","getCategoryHandler","getAllProductsHandler","getProductHandler","addItemToWishlistHandler","getWishlistItemsHandler","removeItemFromWishlistHandler","categories","products","users","Response","sign","require","jwtSecretKey","makeServer","environment","serializers","application","models","product","category","user","cart","wishlist","seeds","server","logging","console","log","forEach","item","create","routes","namespace","post","bind","get","delete","pretender","handledRequest","verb","path","request","status","headers","text","JSON","stringify"],"mappings":"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","sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { addItemToCartHandler, getCartItemsHandler, removeItemFromCartHandler, updateCartItemHandler } from \"./backend/controllers/CartController\";\nimport { getAllCategoriesHandler, getCategoryHandler } from \"./backend/controllers/CategoryController\";\nimport { getAllProductsHandler, getProductHandler } from \"./backend/controllers/ProductController\";\nimport { addItemToWishlistHandler, getWishlistItemsHandler, removeItemFromWishlistHandler } from \"./backend/controllers/WishlistController\";\nimport { categories } from \"./backend/db/categories\";\nimport { products } from \"./backend/db/products\";\nimport { users } from \"./backend/db/users\";\nimport { Response } from \"miragejs\";\n\nconst sign = require(\"jwt-encode\");\n\n// Hardcoded JWT secret key for testing purposes\nconst jwtSecretKey = \"/Q5/K8CrI0kz25G/wZ3mquojG/Kf3xIghztXXLdwuZw=\";\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  return new Server({\n    serializers: {\n      application: RestSerializer,\n    },\n    environment,\n    models: {\n      product: Model,\n      category: Model,\n      user: Model,\n      cart: Model,\n      wishlist: Model,\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      // Disabling console logs from Mirage\n      server.logging = true;\n      console.log(\"Users to be seeded:\", users);\n\n      // Seed products\n      products.forEach((item) => server.create(\"product\", { ...item }));\n\n      // Seed users with an empty cart and wishlist\n      users.forEach((item) => server.create(\"user\", { ...item, cart: [], wishlist: [] }));\n\n      // Seed categories\n      categories.forEach((item) => server.create(\"category\", { ...item }));\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      \n      // Auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // Products routes (public)\n      this.get(\"/products\", getAllProductsHandler.bind(this));\n      this.get(\"/products/:productId\", getProductHandler.bind(this));\n\n      // Categories routes (public)\n      this.get(\"/categories\", getAllCategoriesHandler.bind(this));\n      this.get(\"/categories/:categoryId\", getCategoryHandler.bind(this));\n\n      // Cart routes (private)\n      this.get(\"/user/cart\", getCartItemsHandler.bind(this));\n      this.post(\"/user/cart\", addItemToCartHandler.bind(this));\n      this.post(\"/user/cart/:productId\", updateCartItemHandler.bind(this));\n      this.delete(\"/user/cart/:productId\", removeItemFromCartHandler.bind(this));\n\n      // Wishlist routes (private)\n      this.get(\"/user/wishlist\", getWishlistItemsHandler.bind(this));\n      this.post(\"/user/wishlist\", addItemToWishlistHandler.bind(this));\n      this.delete(\"/user/wishlist/:productId\", removeItemFromWishlistHandler.bind(this));\n\n      // Middleware to add JWT secret key to the context\n      this.pretender.handledRequest = function (verb, path, request) {\n        return {\n          status: 200,\n          headers: { \"content-type\": \"application/json\" },\n          text: JSON.stringify({ jwtSecretKey }),\n        };\n      };\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}