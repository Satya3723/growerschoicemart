{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n/**\n * All the routes related to Wishlist are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's wishlist.\n * send GET Request at /api/user/wishlist\n * */\n\nexport const getWishlistItemsHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  const userId = user._id;\n\n  if (!userId) {\n    new Response(404, {}, {\n      errors: [\"The email you entered is not Registered. Not Found error\"]\n    });\n  }\n\n  const userWishlist = schema.users.findBy({\n    _id: userId\n  }).wishlist;\n  return new Response(200, {}, {\n    wishlist: userWishlist\n  });\n};\n/**\n * This handler handles adding items to user's wishlist.\n * send POST Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const addItemToWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    const userWishlist = schema.users.findBy({\n      _id: userId\n    }).wishlist;\n    const {\n      product\n    } = JSON.parse(request.requestBody);\n    userWishlist.push({ ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate()\n    });\n    this.db.users.update({\n      _id: userId\n    }, {\n      wishlist: userWishlist\n    });\n    return new Response(201, {}, {\n      wishlist: userWishlist\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles removing items to user's wishlist.\n * send DELETE Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const removeItemFromWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n\n  try {\n    if (!userId) {\n      new Response(404, {}, {\n        errors: [\"The email you entered is not Registered. Not Found error\"]\n      });\n    }\n\n    let userWishlist = schema.users.findBy({\n      _id: userId\n    }).wishlist;\n    const productId = request.params.productId;\n    userWishlist = userWishlist.filter(item => item._id !== productId);\n    this.db.users.update({\n      _id: userId\n    }, {\n      wishlist: userWishlist\n    });\n    return new Response(200, {}, {\n      wishlist: userWishlist\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"sources":["F:/testcase3/final1/AgroStores-react-dev/src/backend/controllers/WishlistController.js"],"names":["Response","formatDate","requiresAuth","getWishlistItemsHandler","schema","request","user","JSON","parse","localStorage","getItem","userId","_id","errors","userWishlist","users","findBy","wishlist","addItemToWishlistHandler","call","product","requestBody","push","createdAt","updatedAt","db","update","error","removeItemFromWishlistHandler","productId","params","filter","item"],"mappings":"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","sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to Wishlist are present here.\n * These are private routes.\n * Client needs to add \"authorization\" header with JWT token in it to access it.\n * */\n\n/**\n * This handler handles getting items to user's wishlist.\n * send GET Request at /api/user/wishlist\n * */\n\nexport const getWishlistItemsHandler = function (schema, request) {\n  const user = JSON.parse(localStorage.getItem(\"userData\"));\n  const userId = user._id;\n  \n  if (!userId) {\n    new Response(\n      404,\n      {},\n      {\n        errors: [\"The email you entered is not Registered. Not Found error\"],\n      }\n    );\n  }\n  const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n  return new Response(200, {}, { wishlist: userWishlist });\n};\n\n/**\n * This handler handles adding items to user's wishlist.\n * send POST Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const addItemToWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    const userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n    const { product } = JSON.parse(request.requestBody);\n    userWishlist.push({\n      ...product,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n    });\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\n    return new Response(201, {}, { wishlist: userWishlist });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles removing items to user's wishlist.\n * send DELETE Request at /api/user/wishlist\n * body contains {product}\n * */\n\nexport const removeItemFromWishlistHandler = function (schema, request) {\n  const userId = requiresAuth.call(this, request);\n  try {\n    if (!userId) {\n      new Response(\n        404,\n        {},\n        {\n          errors: [\"The email you entered is not Registered. Not Found error\"],\n        }\n      );\n    }\n    let userWishlist = schema.users.findBy({ _id: userId }).wishlist;\n    const productId = request.params.productId;\n    userWishlist = userWishlist.filter((item) => item._id !== productId);\n    this.db.users.update({ _id: userId }, { wishlist: userWishlist });\n    return new Response(200, {}, { wishlist: userWishlist });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}